(ns ametrine.core
  (:require [ametrine.utils :as utils]
            [ametrine.dict :as dict]
            [clojure.data.json :as json]
            [clojure.string :as str])
  (:gen-class))

(defn add-additional-starter-ender-things
  "adds -T -D *D and such enders to the starter stroke"
  [stroke]
  ;; #, and supress everything else.
  (apply merge (map
                 (fn [[k v]]
                   (let [fuck {k v}
                         ;; if there's an S at the end, remove it, and add it back
                         fuck (if (some #(= \* %) k)
                                (if (= (last k) \S)
                                  (conj fuck {
                                              (str (subs k 0 (dec (count k))) "TS") (str v "t")
                                              (str (subs k 0 (dec (count k))) "SD") (str v "y")
                                              (str (subs k 0 (dec (count k))) "TSDZ") (str v "ty")})
                                  (conj fuck {
                                              (str k "T") (str v "t")
                                              (str k "D") (str v "y")
                                              (str k "TD") (str v "ty")}))
                                (if (= (last k) \S)
                                  (conj fuck {
                                              (str (subs k 0 (dec (count k))) "TS") (str v "t")
                                              (str (subs k 0 (dec (count k))) "SD") (str v "d")
                                              (str (subs k 0 (dec (count k))) "TSDZ") (str v "ted")
                                              (utils/starred (str (subs k 0 (dec (count k))) "D")) (str v "y")})
                                  (conj fuck {
                                              (str k "T") (str v "t")
                                              (str k "D") (str v "d")
                                              (str k "TD") (str v "ted")
                                              (utils/starred k) (str v "y")})))]
                     fuck))
                 (apply merge stroke))))

(defn- map-starters []
  (fn [[k v]]
    (if (some #(= \* %) k)
      (let [k (str/replace k #"\*" "")]
        {
         (str "WHR*" k) v
         (str "WHRA*" k)     (str v "a")
         (str "WHRO*" k)     (str v "o")
         ; (str "WHRO*U" k)    (str v "ou")
         (str "WHRO*U" k)    (str v "ow")
         (str "WHR*E" k)     (str v "e")
         (str "WHRA*E" k)    (str v "ea")
         (str "WHR*U" k)     (str v "u")
         (str "WHRAO*" k)    (str v "ao")
         (str "WHR*EU" k)    (str v "i")
         (str "WHRAO*E" k)   (str v "ee")
         (str "WHRAO*EU" k)  (str v "ie")
         (str "WHRAO*U" k)   (str v "ew")
         (str "WHRA*EU" k)   (str v "ai")
         (str "WHRA*U" k)    (str v "au")
         (str "WHRO*EU" k)   (str v "oi")
         (str "SWHR*" k)     (str "{^}" v)
         (str "SWHRA*" k)    (str "{^}" v "a")
         (str "SWHRO*" k)    (str "{^}" v "o")
         ; (str "SWHRO*U" k)   (str "{^}" v "ou")
         (str "SWHRO*U" k)   (str "{^}" v "ow")
         (str "SWHR*E" k)    (str "{^}" v "e")
         (str "SWHR*U" k)    (str "{^}" v "u")
         (str "SWHRAO*" k)   (str "{^}" v "ao")
         (str "SWHR*EU" k)   (str "{^}" v "i")
         (str "SWHRAO*E" k)  (str "{^}" v "ee")
         (str "SWHRAO*EU" k) (str "{^}" v "ie")
         (str "SWHRAO*U" k)  (str "{^}" v "ew")
         (str "SWHRA*EU" k)  (str "{^}" v "ai")
         (str "SWHRA*U" k)   (str "{^}" v "au")
         (str "SWHRO*EU" k)  (str "{^}" v "oi")

         (str "TWHR*" k)      (str v "e")
         (str "TWHRA*" k)     (str v "ae")
         (str "TWHRO*" k)     (str v "oe")
         (str "TWHRO*U" k)    (str v "oue")
         (str "TWHR*E" k)     (str v "ee")
         (str "TWHRA*E" k)    (str v "eae")
         (str "TWHR*U" k)     (str v "ue")
         (str "TWHRAO*" k)    (str v "aoe")
         (str "TWHR*EU" k)    (str v "ie")
         (str "TWHRAO*E" k)   (str v "eee")
         (str "TWHRAO*EU" k)  (str v "iee")
         (str "TWHRAO*U" k)   (str v "ewe")
         (str "TWHRA*EU" k)   (str v "aie")
         (str "TWHRA*U" k)    (str v "aue")
         (str "TWHRO*EU" k)   (str v "oie")
         (str "STWHR*" k)     (str "{^}" v "e")
         (str "STWHRA*" k)    (str "{^}" v "ae")
         (str "STWHRO*" k)    (str "{^}" v "oe")
         (str "STWHRO*U" k)   (str "{^}" v "oue")
         (str "STWHR*E" k)    (str "{^}" v "ee")
         (str "STWHR*U" k)    (str "{^}" v "ue")
         (str "STWHRAO*" k)   (str "{^}" v "aoe")
         (str "STWHR*EU" k)   (str "{^}" v "ie")
         (str "STWHRAO*E" k)  (str "{^}" v "eee")
         (str "STWHRAO*EU" k) (str "{^}" v "iee")
         (str "STWHRAO*U" k)  (str "{^}" v "ewe")
         (str "STWHRA*EU" k)  (str "{^}" v "aie")
         (str "STWHRA*U" k)   (str "{^}" v "aue")
         (str "STWHRO*EU" k)  (str "{^}" v "oie")
         })

      {
       (str "WHR-" k) v
       (str "WHRA" k)     (str v "a")
       (str "WHRO" k)     (str v "o")
       (str "WHROU" k)    (str v "ou")
       (str "WHRO*U" k)   (str v "ow")
       (str "WHRE" k)     (str v "e")
       (str "WHRAE" k)    (str v "ea")
       (str "WHRU" k)     (str v "u")
       (str "WHRAO" k)    (str v "oo")
       (str "WHRAO*" k)   (str v "ao")
       (str "WHREU" k)    (str v "i")
       (str "WHRAOE" k)   (str v "ee")
       (str "WHRAOEU" k)  (str v "ie")
       (str "WHRAOU" k)   (str v "ew")
       (str "WHRAEU" k)   (str v "ai")
       (str "WHRAU" k)    (str v "au")
       (str "WHROEU" k)   (str v "oi")
       (str "SWHR-" k)    (str "{^}" v)
       (str "SWHRA" k)    (str "{^}" v "a")
       (str "SWHRO" k)    (str "{^}" v "o")
       (str "SWHROU" k)   (str "{^}" v "ou")
       (str "SWHRO*U" k)  (str "{^}" v "ow")
       (str "SWHRE" k)    (str "{^}" v "e")
       (str "SWHRU" k)    (str "{^}" v "u")
       (str "SWHRAO" k)   (str "{^}" v "oo")
       (str "SWHRAO*" k)  (str "{^}" v "ao")
       (str "SWHREU" k)   (str "{^}" v "i")
       (str "SWHRAOE" k)  (str "{^}" v "ee")
       (str "SWHRAOEU" k) (str "{^}" v "ie")
       (str "SWHRAOU" k)  (str "{^}" v "ew")
       (str "SWHRAU" k)   (str "{^}" v "au")
       (str "SWHROEU" k)  (str "{^}" v "oi")

       (str "TWHR-" k)     (str v "e")
       (str "TWHRA" k)     (str v "ae")
       (str "TWHRO" k)     (str v "oe")
       (str "TWHROU" k)    (str v "oue")
       (str "TWHRE" k)     (str v "ee")
       (str "TWHRAE" k)    (str v "eae")
       (str "TWHRU" k)     (str v "ue")
       (str "TWHRAO" k)    (str v "ooe")
       (str "TWHRAO*" k)   (str v "aoe")
       (str "TWHREU" k)    (str v "ie")
       (str "TWHRAOE" k)   (str v "eee")
       (str "TWHRAOEU" k)  (str v "iee")
       (str "TWHRAOU" k)   (str v "ewe")
       (str "TWHRAEU" k)   (str v "aie")
       (str "TWHRAU" k)    (str v "aue")
       (str "TWHROEU" k)   (str v "oie")
       (str "STWHR-" k)    (str "{^}" v "e")
       (str "STWHRA" k)    (str "{^}" v "ae")
       (str "STWHRO" k)    (str "{^}" v "oe")
       (str "STWHROU" k)   (str "{^}" v "oue")
       (str "STWHRE" k)    (str "{^}" v "ee")
       (str "STWHRU" k)    (str "{^}" v "ue")
       (str "STWHRAO" k)   (str "{^}" v "ooe")
       (str "STWHRAO*" k)  (str "{^}" v "aoe")
       (str "STWHREU" k)   (str "{^}" v "ie")
       (str "STWHRAOE" k)  (str "{^}" v "eee")
       (str "STWHRAOEU" k) (str "{^}" v "iee")
       (str "STWHRAOU" k)  (str "{^}" v "ewe")
       (str "STWHRAEU" k)  (str "{^}" v "aie")
       (str "STWHRAU" k)   (str "{^}" v "aue")
       (str "STWHROEU" k)  (str "{^}" v "oie")
       })
    ))

(defn- map-enders []
  (fn [[k v]]
    (if (some #(= \* %) k)
      (let [k (str/replace k #"\*" "")]
        {
         (str "^WHR*" k) v
         (str "^WHRA*" k)     (str "a" v)
         (str "^WHRO*" k)     (str "o" v)
         ; (str "^WHRO*U" k)     (str "ou" v)
         (str "^WHRO*U" k)     (str "ow" v)
         (str "^WHR*E" k)     (str "e" v)
         (str "^WHRA*E" k)     (str "ea" v)
         (str "^WHR*U" k)     (str "u" v)
         (str "^WHRAO*" k)   (str "ao" v)
         (str "^WHR*EU" k)    (str "i" v)
         (str "^WHRAO*E" k)   (str "ee" v)
         (str "^WHRAO*EU" k)  (str "ie" v)
         (str "^WHRAO*U" k)   (str "ew" v)
         (str "^WHRA*EU" k)   (str "ai" v)
         (str "^WHRA*U" k)   (str "au" v)
         (str "^WHRO*EU" k)   (str "oi" v)
         (str "^SWHR*" k)    (str "{^}" v)
         (str "^SWHRA*" k)    (str "{^}" "a" v)
         (str "^SWHRO*" k)    (str "{^}" "o" v)
         ; (str "^SWHRO*U" k)    (str "{^}" "ou" v)
         (str "^SWHRO*U" k)    (str "{^}" "ow" v)
         (str "^SWHR*E" k)    (str "{^}" "e" v)
         (str "^SWHR*U" k)    (str "{^}" "u" v)
         (str "^SWHRAO*" k)  (str "{^}" "ao" v)
         (str "^SWHR*EU" k)   (str "{^}" "i" v)
         (str "^SWHRAO*E" k)  (str "{^}" "ee" v)
         (str "^SWHRAO*EU" k) (str "{^}" "ie" v)
         (str "^SWHRAO*U" k)  (str "{^}" "ew" v)
         (str "^SWHRA*EU" k)  (str "{^}" "ai" v)
         (str "^SWHRA*U" k)  (str "{^}" "au" v)
         (str "^SWHRO*EU" k)  (str "{^}" "oi" v)

         (str "^TWHR*" k)      (str v "e")
         (str "^TWHRA*" k)     (str "a" v "e")
         ; (str "^TWHRO*U" k)     (str "ou" v "e")
         (str "^TWHRO*U" k)     (str "ow" v "e")
         (str "^TWHR*E" k)     (str "e" v "e")
         (str "^TWHRA*E" k)     (str "ea" v "e")
         (str "^TWHR*U" k)     (str "u" v "e")
         (str "^TWHRAO*" k)   (str "ao" v "e")
         (str "^TWHR*EU" k)    (str "i" v "e")
         (str "^TWHRAO*E" k)   (str "ee" v "e")
         (str "^TWHRAO*EU" k)  (str "ie" v "e")
         (str "^TWHRAO*U" k)   (str "ew" v "e")
         (str "^TWHRA*EU" k)   (str "ai" v "e")
         (str "^TWHRA*U" k)   (str "au" v "e")
         (str "^TWHRO*EU" k)   (str "oi" v "e")
         (str "^STWHR*" k)    (str "{^}" v "e")
         (str "^STWHRA*" k)    (str "{^}" "a" v "e")
         (str "^STWHRO*" k)    (str "{^}" "o" v "e")
         ; (str "^STWHRO*U" k)    (str "{^}" "ou" v "e")
         (str "^STWHRO*U" k)    (str "{^}" "ow" v "e")
         (str "^STWHR*E" k)    (str "{^}" "e" v "e")
         (str "^STWHR*U" k)    (str "{^}" "u" v "e")
         (str "^STWHRAO*" k)  (str "{^}" "ao" v "e")
         (str "^STWHR*EU" k)   (str "{^}" "i" v "e")
         (str "^STWHRAO*E" k)  (str "{^}" "ee" v "e")
         (str "^STWHRAO*EU" k) (str "{^}" "ie" v "e")
         (str "^STWHRAO*U" k)  (str "{^}" "ew" v "e")
         (str "^STWHRA*EU" k)  (str "{^}" "ai" v "e")
         (str "^STWHRA*U" k)  (str "{^}" "au" v "e")
         (str "^STWHRO*EU" k)  (str "{^}" "oi" v "e")
         })

      {
       (str "^WHR-" k) v
       (str "^WHRA" k)     (str "a" v)
       (str "^WHRO" k)     (str "o" v)
       (str "^WHROU" k)     (str "ou" v)
       (str "^WHRO*U" k)     (str "ow" v)
       (str "^WHRE" k)     (str "e" v)
       (str "^WHRAE" k)     (str "ea" v)
       (str "^WHRU" k)     (str "u" v)
       (str "^WHRAO" k)    (str "oo" v)
       (str "^WHRAO*" k)   (str "ao" v)
       (str "^WHREU" k)    (str "i" v)
       (str "^WHRAOE" k)   (str "ee" v)
       (str "^WHRAOEU" k)  (str "ie" v)
       (str "^WHRAOU" k)   (str "ew" v)
       (str "^WHRAEU" k)   (str "ai" v)
       (str "^WHRAU" k)   (str "ai" v)
       (str "^WHROEU" k)   (str "oi" v)
       (str "^SWHR-" k)    (str "{^}" v)
       (str "^SWHRA" k)    (str "{^}" "a" v)
       (str "^SWHRO" k)    (str "{^}" "o" v)
       (str "^SWHROU" k)    (str "{^}" "ou" v)
       (str "^SWHRO*U" k)    (str "{^}" "ow" v)
       (str "^SWHRE" k)    (str "{^}" "e" v)
       (str "^SWHRU" k)    (str "{^}" "u" v)
       (str "^SWHRAO" k)   (str "{^}" "oo" v)
       (str "^SWHRAO*" k)  (str "{^}" "ao" v)
       (str "^SWHREU" k)   (str "{^}" "i" v)
       (str "^SWHRAOE" k)  (str "{^}" "ee" v)
       (str "^SWHRAOEU" k) (str "{^}" "ie" v)
       (str "^SWHRAOU" k)  (str "{^}" "ew" v)
       (str "^SWHRAEU" k)  (str "{^}" "ai" v)
       (str "^SWHRAU" k)  (str "{^}" "au" v)
       (str "^SWHROEU" k)  (str "{^}" "oi" v)

       (str "^TWHR-" k)     (str v "e")
       (str "^TWHRA" k)     (str "a" v "e")
       (str "^TWHRO" k)     (str "o" v "e")
       (str "^TWHROU" k)     (str "ou" v "e")
       (str "^TWHRO*U" k)     (str "ow" v "e")
       (str "^TWHRE" k)     (str "e" v "e")
       (str "^TWHRAE" k)     (str "ea" v "e")
       (str "^TWHRU" k)     (str "u" v "e")
       (str "^TWHRAO" k)    (str "oo" v "e")
       (str "^TWHRAO*" k)   (str "ao" v "e")
       (str "^TWHREU" k)    (str "i" v "e")
       (str "^TWHRAOE" k)   (str "ee" v "e")
       (str "^TWHRAOEU" k)  (str "ie" v "e")
       (str "^TWHRAOU" k)   (str "ew" v "e")
       (str "^TWHRAEU" k)   (str "ai" v "e")
       (str "^TWHRAU" k)   (str "au" v "e")
       (str "^TWHROEU" k)   (str "oi" v "e")
       (str "^STWHR-" k)    (str "{^}" v "e")
       (str "^STWHRA" k)    (str "{^}" "a" v "e")
       (str "^STWHRO" k)    (str "{^}" "o" v "e")
       (str "^STWHROU" k)    (str "{^}" "ou" v "e")
       (str "^STWHRO*U" k)    (str "{^}" "ow" v "e")
       (str "^STWHRE" k)    (str "{^}" "e" v "e")
       (str "^STWHRU" k)    (str "{^}" "u" v "e")
       (str "^STWHRAO" k)   (str "{^}" "oo" v "e")
       (str "^STWHRAO*" k)  (str "{^}" "ao" v "e")
       (str "^STWHREU" k)   (str "{^}" "i" v "e")
       (str "^STWHRAOE" k)  (str "{^}" "ee" v "e")
       (str "^STWHRAOEU" k) (str "{^}" "ie" v "e")
       (str "^STWHRAOU" k)  (str "{^}" "ew" v "e")
       (str "^STWHRAEU" k)  (str "{^}" "ai" v "e")
       (str "^STWHRAU" k)  (str "{^}" "au" v "e")
       (str "^STWHROEU" k)  (str "{^}" "oi" v "e")
       })))

(defn capitalize-joiner
  "Will capitilize the 4th (index 3) character of the given stroke"
  [stroke]
  (try
    (apply str
           (map str [(subs stroke 0 3)
                     (Character/toUpperCase (get stroke 3))
                     (subs stroke 4)]))
    (catch Exception e (println (.getMessage e)) (println "failed capitalize-joiner with stroke:" stroke) stroke)))

(defn generate-dict
  "generates the dict (go figure)
  Nothing important going on here I wouldn't look any further."
  [starters enders]
  (map
    (fn [[k v]]
      {k (str "{>}" v)
       (str "#" k) (if (and (>= (count v) 4) (= (subs v 0 3) "{^}"))
                     (capitalize-joiner v)
                     (str/capitalize v))})
    (apply merge
           (add-additional-starter-ender-things (map (map-starters)
                                                     starters))
           (map (map-enders)
                enders))))

(defn -main
  [& args]
  (comment
    (let [config (utils/load-resource "config")
          dict (merge (apply merge (generate-dict (config :starters) (config :enders))) (config :overrides))]
      (spit ((config :settings) :output-file) (-> dict
                                                  (json/write-str :escape-slash false)
                                                  (str/replace #"," ",\n")))))

  (let [config (utils/load-resource "config-1")
        output-file ((config :settings) :output-file)
        ;; Apply overrides as well
        dict (merge (dict/generate
                      (config :starters)
                      (config :vowels)
                      (config :enders))
                    (config :overrides))
        output-dict (utils/transform-json dict)]
    (spit output-file output-dict)))
